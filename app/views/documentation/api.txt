
= What Happened API

== Overview
Results are returned as XML.  There will be future support for JSON.


== Object Model

| User: 	| Curates data about an Item. |
| Item: 	| A composite of one or more physical entities (for example a Building may be composed of rooms).|
| Entity: 	| A uniquely identifiable thing|
| Property:	| Static information about an entity|
| Aspect:	| Time series information about an entity|
| Witness:	| A reporting entity (such as a camera or a sensor)|
| Report:	| A measurement of an aspect at a single point in time (for example 18degrees at 10.30 1/3/2011 UTC)|
| Clerks Report:| 	A record of receiving information from a witness.|


== HTTP

The API sets out to correctly use HTTP response codes for HTTP API request status.  API clients should handle any valid HTTP response code including redirect.  Possible response codes include:

| 200 | OK             | Request successful - response contains valid data |
| 400 | Bad Request    | The request was not well formed or required parameters were missing |
| 403 | Not Authorized | Authentication failed.  API key may be unrecognised or not authorised for to access the data at the given URL |
| 404 | Not Found      | The API was not found |
| 500 | Internal Server Error | Problem with the service. |



== Authentication

Users are authenticated by password and have access rights only to Items, Entities, Properties, Aspects, Witnesses and Reports that they create.

<**//Future//**>

Key is presented in the http request header  (X-OcApiKey: YOUR_KEY)
Keys are hierarchical 

| UserKey:	| Access to User's Items and Witnesses    |
| ItemKey:       | Access to an Item and its Entities      |
| EntityKey:	| Access to an Entities and its Aspects   |
| AspectKey:	| Access to an Aspect                     |

Keys can be time bound, giving access to reports only within a specific range of times.

Keys can be generated at
* {{{http://socksforlife.co.uk/v1/keygen/}}}


=====example:
{{{

    curl --request GET --header "X-OcApiKey: YOUR_KEY" http://socksforlife.co.uk/V1.0/data/745

}}}


== Items

The list of items and their associated entities and aspects accessible for the current user or with the given API Key:

* {{{http://socksforlife.co.uk/v1/items}}}

=====example:
{{{

    curl --request GET http://socksforlife.co.uk/v1/items

    response
    ========

  <itemtree>
  <items>
    <name>Tea Service</name>
    <entities>
      <name>plate 1</name>
      <id>6</id>
      <aspects>
        <name>camera 1</name>
        <id>60</id>
        <description></description>
      </aspects>
      <aspects>
        <name>camera 2</name>
        <id>61</id>
        <description></description>
      </aspects>
    </entities>
    <entities>
      <name>plate 2</name>
      <id>7</id>
      <aspects>
        <name>camera 1</name>
        <id>62</id>
        <description></description>
      </aspects>
      <aspects>
        <name>camera 2</name>
        <id>63</id>
        <description></description>
      </aspects>
      <description></description>
    </entities>
    <id>1</id>
    <user_id>1</user_id>
    <description>My dinner plates with funky dtouch designs.</description>
  </items>
  </itemtree>


}}}

== Item Registration

To allow easy creation of the structures necessary for recoding an objects data the API supports a one stop setup request.  A POST request is made with an XML request of the required structure.  WhatHappened attempts to match existing structures; creates any necessary new structures and returns XML populated with id's.

An item must exist before item registration can be used to update the structure.

* {{{http://socksforlife.co.uk/v1/item/<item_id>}}}


=====example:
{{{

    curl --request POST --header "X-OcApiKey: YOUR_KEY" --data @item_request  http://socksforlife.co.uk/v1/item/590_dinnerservice

    item_request
    ============

    <item>
      <id>3472</id>
      <name>Tea Service</name>
      <entities>
	<entity>
	  <name>Plate 1</name>
	  <id>23876</id>
	  <aspects>
	    <aspect>
	      <name>Camera 1 Location</name>
	      <id>87234</id>
	    </aspect>
	  </aspects>
	</entity>
	<entity>
	  <name>Plate 2</name>
	  <id>2</id>
	  <aspects />
	  <description>The big round one!</description>
	</entity>
      </entities>
    </item>

    response
    ========

    <item>
      <id>3472</id>
      <name>Tea Service</name>
      <entities>
	<entity>
	  <name>Plate 1</name>
	  <id>23876</id>
	  <aspects>
	    <aspect>
	      <name>Camera 1 Location</name>
	      <id>87234</id>
	    </aspect>
	  </aspects>
	</entity>
	<entity>
	  <name>Plate 2</name>
	  <id>2</id>
	  <aspects />
	  <description>The big round one!</description>
	</entity>
      </entities>
    </item>


}}}



== Submit Data

Send a post request to
* {{{http://socksforlife.co.uk/v1/file_a_report/<aspect_id>}}}

With xml data in the following format:

{{{
    <report>
      <ment t='2011-07-11 10:31:42 UTC' s='0.00'>...</ment>
      <ment t='2011-07-11 10:31:42 UTC' s='0.25'>...</ment>
      <ment t='2011-07-11 10:31:42 UTC' s='0.50'>...</ment>
      <ment t='2011-07-11 10:31:42 UTC' s='0.75'>...</ment>
    </report>
}}}

or JSON data in the following format:

{{{

   [
    {"t":"2011-10-10T14:36:07+01:00", "s":0.0, "ment":{...}},
    {"t":"2011-10-10T14:36:07+01:00", "s":0.4, "ment":{...}},
    {"t":"2011-10-10T14:36:07+01:00", "s":0.8, "ment":{...}},
   ]

}}}

Each measurement is represented by a 'ment' element.  The 't' attribute carries the ISO 8601 format time at which the measurement was taken.  The optional 's' attribute carries the fraction of a second at which the measurement was taken.  's' defaults to zero and if present must be less than 1 and greater or equal to zero.  The contents of the 'ment' element are stored as the measurement itself.


== Retrieve Data

* {{{http://socksforlife.co.uk/v1/data/<aspect_id>}}}

Specify 'from' and 'until' parameters as well formatted times to restrict the range of data that is retrieved.  Data is limited to 10000 reports per query.  Use a restricted time range to access data in multiple requests if necessary.

| Parameter | Format                                  | Notes |
| from      | iso8601: e.g. 2011-07-11T10:59:19+01:00 | Omit to specify from beginning of records. |
| until     | iso8601: e.g. 2011-07-11T10:59:19+01:00 | Omit to specify until current time. |


=====example:
{{{

    curl --request GET http://socksforlife.co.uk/v1/counts/457?from="2011-07-11T10:30:00"\&until="2011-07-11T10:34:59"

    response
    ========

    <report>
      <ment t='2011-07-11 10:31:42 UTC' s='0'>....</ment>
      <ment t='2011-07-11 10:33:15 UTC' s='0.5'>....</ment>
      <ment t='2011-07-11 10:34:51 UTC' s='0'>....</ment>
    </report>

}}}


== Retrieve Record Counts

* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/}}}
* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/<year>}}}
* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/<year>/<day_of_year>}}}
* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/<year>/<day_of_year>/<minute_of_day>}}}


Return the counts for the number of records held for an given aspect.

The first form returns counts per year.  The second form returns the counts for each day of a given year (up to 366).  The third form returns the counts for each minute of a given day (upto 1440) the fourth reports the counts for each second of a given minute (upto 60).

Specify 'from' and 'until' parameters as well formatted times to restrict the range of data that is retrieved.  Data is limited to 10000 reports per query.  Use a restricted time range to access data in multiple requests if necessary.

Specify 'grain' as 'year', 'day', 'minute' or 'second' to force a granularity at least as fine as the granularity implied by the url (for example specifying a url with <day_of_year> and 'grain' of 'year' will return counts by the finest granularity  - i.e. by minute.

Specify 'grain' as a number _n_ to force the granularity required to return at least _n_ divisions within the specified time.  If _n_ divisions are not available the service will return all qualifying counts at second granularity.  

Where the returned granularity is variable the granularity chosen can be inferred from the granularity of the returned xml attributes.


| Parameter | Format                                  | Notes |
| from      | iso8601: e.g. 2011-07-11T10:59:19+01:00 | Omit to specify from beginning of records. |
| until     | iso8601: e.g. 2011-07-11T10:59:19+01:00 | Omit to specify until current time. |
| grain     | 'day','minute','second'                 | grain of 'day' reports per day counts etc. |
| grain     | divisions                               | Use the coarsest grain that returns at least 'divisions' divisions |


The purpose of this call is to allow an application to display only timespans which contain interesting data.

Records with counts of zero are not returned.

=====example 1:
{{{

    curl --request GET http://socksforlife.co.uk/v1/counts/457

    response
    ========

    <counts>
      <count year='1988'>2481</count>
      <count year='1989'>2397</count>
    </counts>

}}}

=====example 2:
{{{
    curl --request GET http://socksforlife.co.uk/v1/counts/457/2011/166/878

    response
    ========

    <counts>
      <count year='2011' day='166' minute='878' second='39' >8</count>
      <count year='2011' day='166' minute='878' second='40' >42</count>
    </counts>
}}}

=====example 3:
{{{
    curl --request GET http://socksforlife.co.uk/v1/counts/457?grain=200


    response
    ========

    <counts>
      ...
    </counts>
}}}


== Replay

Stream data can be replayed via an XMPP pub-sub service.  A replay can be started by sending a POST request to the URL below specifying the aspect, start and end times, rate and gap skip properties.

* {{{http://socksforlife.co.uk/v1/replay-create/<aspect_id>/}}}
* {{{http://socksforlife.co.uk/v1/replay-control/<replay_id>/}}}

| Parameter | Format                                  | Notes |
| from      | iso8601: e.g. 2011-07-11T10:59:19+01:00 | Omit to specify from beginning of records. |
| until     | iso8601: e.g. 2011-07-11T10:59:19+01:00 | Omit to specify until current time. |
| rate      | 0.01 - 10000                            | Speed factor for replaying the stream data |
| gapskip  | seconds                                  | The minimum number of seconds in replay time to consider skip |
| replayid    | [a-Z0-9-_]                            | alphanumeric requested replay ID |
| start     | 1                                       | a start command |
| stop      | 1                                       | a stop command |

The POST request to replay-create returns a plain text address of the pub-sub node to which the client can subscribe to receive the replay.

A POST request to replay-control updates the parameters of the replay and optionally starts the replay.  The request returns the current state of the replay.

The above parameters can be used with either replay-create or replay-control.  This allows a single request to replay-create to create and start a replay.

Gap skipping allows a replay to skip long periods between records.  The gap skip parameter specifies the minimum number of seconds that will be considered a gap before the replay should skip to the next available record.

Once a replay is started the first matching record of the aspect is published to the XMPP pubsub node at
{{{ /replay/<replay_id> }}}

A POST may be made to replay-create that specifies a start command. In this case the replay will start before the client has had a chance to subscribe to the pubsub node and it is to be expected at least some of the first measurements will be missed by the client. 

A replay ID may be requested as a parameter during node creation.  If the replay id is available (i.e. not registered on that aspect by another user) then it will be used for the replay. This allows the pubsub node to be known in advance of the replay.

POSTs to replay-control during a replay that is currently running on that aspect and replay id will update the parameters (rate, gapskip and until) for the running replay (allowing dynamic rate changes).

Once a replay is running, after publishing each message the service waits the time difference between that message and the subsequent one multiplied by the rate parameter.  That is if the rate parameter is 1 the data is replayed with the same relative timing as it was received.  Replay may have jitter of up to a few seconds due to loading.

If the specified rate results in attempting to deliver messages faster than it is possible then all messages will still be attempted and the actual rate will be lower than that specified.

A replay will run indefinitely if data is submitted to the stream at a faster rate than the replay and an end time is not specified.


