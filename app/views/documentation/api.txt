
= What Happened API

== Overview
Results are returned as XML.  There will be future support for JSON.


== Object Model

| User: 	| Curates data about an Item. |
| Item: 	| A composite of one or more physical entities (for example a Building may be composed of rooms).|
| Entity: 	| A uniquely identifiable thing|
| Property:	| Static information about an entity|
| Aspect:	| Time series information about an entity|
| Witness:	| A reporting entity (such as a camera or a sensor)|
| Report:	| A measurement of an aspect at a single point in time (for example 18degrees at 10.30 1/3/2011 UTC)|
| Clerks Report:| 	A record of receiving information from a witness.|


== HTTP

The API sets out to correctly use HTTP response codes for HTTP API request status.  API clients should handle any valid HTTP response code including redirect.  Possible response codes include:

| 200 | OK             | Request successful - response contains valid data |
| 400 | Bad Request    | The request was not well formed or required parameters were missing |
| 403 | Not Authorized | Authentication failed.  API key may be unrecognised or not authorised for to access the data at the given URL |
| 404 | Not Found      | The API was not found |
| 500 | Internal Server Error | Problem with the service. |



== Authentication

Users are authenticated by password and have access rights only to Items, Entities, Properties, Aspects, Witnesses and Reports that they create.

<**//Future//**>

Key is presented in the http request header  (X-OcApiKey: YOUR_KEY)
Keys are hierarchical 

| UserKey:	| Access to User's Items and Witnesses    |
| ItemKey:       | Access to an Item and its Entities      |
| EntityKey:	| Access to an Entities and its Aspects   |
| AspectKey:	| Access to an Aspect                     |

Keys can be time bound, giving access to reports only within a specific range of times.

Keys can be generated at
* {{{http://socksforlife.co.uk/v1/keygen/}}}


=====example:
{{{

    curl --request GET --header "X-OcApiKey: YOUR_KEY" http://socksforlife.co.uk/V1.0/data/745

}}}


== Items

The list of items and their associated entities and aspects accessible for the current user or with the given API Key: 

* {{{http://socksforlife.co.uk/v1/items}}}

=====example:
{{{

    curl --request GET http://socksforlife.co.uk/v1/items

    response
    ========

  <itemtree>
  <items>
    <name>Tea Service</name>
    <entities>
      <name>plate 1</name>
      <id>6</id>
      <aspects>
        <name>camera 1</name>
        <id>60</id>
        <description></description>
      </aspects>
      <aspects>
        <name>camera 2</name>
        <id>61</id>
        <description></description>
      </aspects>
    </entities>
    <entities>
      <name>plate 2</name>
      <id>7</id>
      <aspects>
        <name>camera 1</name>
        <id>62</id>
        <description></description>
      </aspects>
      <aspects>
        <name>camera 2</name>
        <id>63</id>
        <description></description>
      </aspects>
      <description></description>
    </entities>
    <id>1</id>
    <user_id>1</user_id>
    <description>My dinner plates with funky dtouch designs.</description>
  </items>
  </itemtree>


}}}

== Item Registration

To allow easy creation of the structures necessary for recoding an objects data the API supports a one stop setup request.  A POST request is made with an XML request of the required structure.  WhatHappened attempts to match existing structures; creates any necessary new structures and returns XML populated with id's.

An item must exist before item registration can be used to update the structure.

* {{{http://socksforlife.co.uk/v1/item/<item_id>}}}


=====example:
{{{

    curl --request POST --header "X-OcApiKey: YOUR_KEY" --data @item_request  http://socksforlife.co.uk/v1/item/590_dinnerservice

    item_request
    ============

    <item>
      <id>3472</id>
      <name>Tea Service</name>
      <entities>
	<entity>
	  <name>Plate 1</name>
	  <id>23876</id>
	  <aspects>
	    <aspect>
	      <name>Camera 1 Location</name>
	      <id>87234</id>
	    </aspect>
	  </aspects>
	</entity>
	<entity>
	  <name>Plate 2</name>
	  <id>2</id>
	  <aspects />
	  <description>The big round one!</description>
	</entity>
      </entities>
    </item>

    response
    ========

    <item>
      <id>3472</id>
      <name>Tea Service</name>
      <entities>
	<entity>
	  <name>Plate 1</name>
	  <id>23876</id>
	  <aspects>
	    <aspect>
	      <name>Camera 1 Location</name>
	      <id>87234</id>
	    </aspect>
	  </aspects>
	</entity>
	<entity>
	  <name>Plate 2</name>
	  <id>2</id>
	  <aspects />
	  <description>The big round one!</description>
	</entity>
      </entities>
    </item>


}}}



== Submit Data

* {{{http://socksforlife.co.uk/v1/file_a_report/<aspect_id>}}}


== Retrieve Data

* {{{http://socksforlife.co.uk/v1/data/<aspect_id>}}}


== Retrieve Record Counts

* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/}}}
* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/<year>}}}
* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/<year>/<day_of_year>}}}
* {{{http://socksforlife.co.uk/v1/counts/<aspect_id>/<year>/<day_of_year>/<minute_of_day>}}}


Return the counts for the number of records held for an given aspect.

The first form returns counts per year.  The second form returns the counts for each day of a given year (up to 366).  The third form returns the counts for each minute of a given day (upto 1440) the fourth reports the counts for each second of a given minute (upto 60).

The purpose of this call is to allow an application to display only timespans which contain interesting data.

records with counts of zero are not returned.

=====example 1:
{{{

    curl --request GET http://socksforlife.co.uk/v1/counts/457

    response
    ========

    <history>
      <count date='1987'>2368</count>
      <count year='1988'>2481</count>
      <count year='1989'>2397</count>
    </history>

}}}

=====example 2:
{{{
    curl --request GET http://socksforlife.co.uk/v1/counts/457/1987

    response
    ========

    <history>
      <count year='1987' day='17' >36</count>
      <count year='1987' day='18' >36</count>
      ...
    </history>
}}}


